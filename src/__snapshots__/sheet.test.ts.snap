// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StyleSheet should accept insertionPoint option 1`] = `
<html>
  <head>
    
      
    <style
      id="first"
    />
    
      
    <style
      id="last"
    />
    
    
    <style
      data-styils=""
    >
      
      html { color: hotpink; }
    </style>
    <style
      data-styils=""
    >
      
      * { box-sizing: border-box; }
    </style>
  </head>
  <body />
</html>
`;

exports[`StyleSheet should accept prepend option 1`] = `
<html>
  <head>
    <style
      id="other"
    />
    <style
      data-styils=""
    >
      
      html { color: hotpink; }
    </style>
    <style
      data-styils=""
    >
      
      * { box-sizing: border-box; }
    </style>
  </head>
  <body />
</html>
`;

exports[`StyleSheet should be able to hydrate styles 1`] = `
<html>
  <head />
  <body>
    <style>
      .foo { color: hotpink; }
    </style>
    <style>
      .bar { background-color: green; }
    </style>
  </body>
</html>
`;

exports[`StyleSheet should be able to hydrate styles 2`] = `
<html>
  <head />
  <body>
    <style>
      .foo { color: hotpink; }
    </style>
    <style>
      .bar { background-color: green; }
    </style>
  </body>
</html>
`;

exports[`StyleSheet should correctly position hydrated styles when used with \`prepend\` option 1`] = `
<html>
  <head>
    <style
      id="other"
    />
  </head>
  <body>
    <style>
      .foo { color: hotpink; }
    </style>
    <style>
      .bar { background-color: green; }
    </style>
  </body>
</html>
`;

exports[`StyleSheet should flush hydrated styles 1`] = `
<html>
  <head>
    <style
      data-styils=""
    >
      
      html { color: hotpink; }
    </style>
    <style
      data-styils=""
    >
      
      * { box-sizing: border-box; }
    </style>
  </head>
  <body>
    <style>
      .foo { color: hotpink; }
    </style>
    <style>
      .bar { background-color: green; }
    </style>
  </body>
</html>
`;

exports[`StyleSheet should flush hydrated styles 2`] = `
<html>
  <head />
  <body>
    <style>
      .foo { color: hotpink; }
    </style>
    <style>
      .bar { background-color: green; }
    </style>
  </body>
</html>
`;

exports[`StyleSheet should insert a rule into the DOM when not in speedy 1`] = `
<html>
  <head>
    <style
      data-styils=""
    >
      
      html { color: hotpink; }
    </style>
  </head>
  <body />
</html>
`;

exports[`StyleSheet should insert a rule with insertRule when in speedy 1`] = `
<html>
  <head>
    <style
      data-styils=""
    >
      
    </style>
  </head>
  <body />
</html>
`;

exports[`StyleSheet should insert a rule with insertRule when in speedy 2`] = `
Array [
  CSSStyleRule {
    "__ends": 24,
    "__starts": 0,
    "parentRule": null,
    "parentStyleSheet": CSSStyleSheet {
      "cssRules": [Circular],
      "parentStyleSheet": null,
    },
    "selectorText": "html",
    "style": CSSStyleDeclaration {
      "0": "color",
      "__starts": 5,
      "_importants": Object {
        "color": "",
      },
      "color": "hotpink",
      "length": 1,
      "parentRule": [Circular],
    },
  },
]
`;

exports[`StyleSheet should remove its style elements from the document when flushed 1`] = `
<html>
  <head>
    <style
      data-styils=""
    >
      
      html { color: hotpink; }
    </style>
  </head>
  <body />
</html>
`;

exports[`StyleSheet should remove its style elements from the document when flushed 2`] = `
<html>
  <head />
  <body />
</html>
`;

exports[`StyleSheet should set the data-styils attribute to the key option 1`] = `
<html>
  <head>
    <style
      data-styils="some-key"
    >
      
      html { color: hotpink; }
    </style>
  </head>
  <body />
</html>
`;

exports[`StyleSheet should use the container option instead of document.head to insert style elements into if it's passed 1`] = `
<html>
  <head />
  <body>
    <div>
      <style
        data-styils=""
      >
        
        html { color: hotpink; }
      </style>
    </div>
  </body>
</html>
`;

exports[`StyleSheet should work if insertionPoint is last element 1`] = `
<html>
  <head>
    <style
      id="last"
    />
    <style
      data-styils=""
    >
      
      html { color: hotpink; }
    </style>
    <style
      data-styils=""
    >
      
      * { box-sizing: border-box; }
    </style>
  </head>
  <body />
</html>
`;

exports[`StyleSheet should work with a ShadowRoot container 1`] = `
<html>
  <head />
  <body>
    <div />
  </body>
</html>
`;

exports[`StyleSheet should work with a ShadowRoot container 2`] = `
HTMLCollection [
  <style
    data-styils=""
  >
    
    html { color: hotpink; }
  </style>,
]
`;
