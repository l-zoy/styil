{
  "license": "Released under the MIT License",
  "copyright": "Copyright Â© 2022-present Zoy-l",
  "variantsCode": "variants is the third parameter of styled",
  "themeCode": "Any",
  "errorCode": "Each setMove call creates multiple almost identical CSS rules",
  "baseCode": {
    "1": "We can add namespace, which can be useful when developing libraries",
    "2": "Styles inside :global will generate global styles",
    "3": "The default unit is px"
  },
  "slogan": "A lightweight and fast css-in-js solution. Supports theming, variants, SSR, Sourcemap, and complete type definitions",
  "quick": "Quick Start",
  "github": "View on Github",
  "plan": "Planned",
  "fast": "Fast",
  "fastDesc": "Avoids unnecessary style props and redundant rendering calculations at runtime.",
  "typescript": "Fully Typed",
  "typescriptDesc": "Flexible API and complete TypeScript types.",
  "theme": "Theming",
  "themeDesc": "Provides a simple way to customize themes. You can change colors, fonts, breakpoints, and everything you need.",
  "small": "Tiny",
  "smallDesc": "Provides complete functionality with just 4kb size overhead.",
  "withBase": "Using Base",
  "withVariants": "Rendering Variants Dynamically",
  "withVars": "Using Vars Variables",
  "withTheme": "Using Theme",
  "withSSR": "Server-Side Rendering (SSR)",
  "withKeyframes": "Keyframes Animation",
  "withGlobal": "Global Styles",
  "withMedia": "Media Queries",
  "withBaseDesc": {
    "1": "Usage is similar to other CSS-in-JS frameworks",
    "2": "Supports special nested selector & and all native CSS selectors. It also provides a polymorphic as prop for defining the rendering tag of the component.",
    "3": "Additionally, if using TypeScript, the prop definitions will update when adding the as prop."
  },
  "withVariantsDesc": {
    "1": "The created styled components have a variants property.",
    "2": "Dynamic interpolation is used instead of passing props, as passing values via props incurs significant performance overhead. Additionally, the following code can be written."
  },
  "withThemeDesc": "Styils provides a completely flexible theming experience. You can apply them wherever you want as needed.",
  "withSSRDesc": {
    "1": "Styils supports SSR and is easy to integrate with popular frameworks.",
    "2": "If using theming, createExtracts should be exported from createSystem.",
    "3": "Check out the examples: <a href='https://github.com/styils/styils-examples/tree/main'>Examples</a>",
    "4": "If not using a framework, the object returned by createExtracts has an extractHtml property, which returns a string. Add it to the HTML as needed."
  },
  "withVarsDesc": {
    "1": "The appropriate unit needs to be explicitly added here.",
    "2": "The created styled components have a vars property.",
    "3": "Values can be dynamically bound without worrying about significant performance overhead.",
    "4": "Note: Variants do not support this."
  },
  "withKeyframesDesc": "Styils provides two ways to define keyframes, choose the one you prefer.",
  "withGlobalDesc": "Styils provides two ways to define global styles, choose the one you prefer.",
  "withMediaDesc": "Just like using media queries in regular CSS, you can directly place @media inside CSS blocks.",
  "back": "Back",
  "bench": "Benchmark",
  "create-and-mount-button": "Create and Mount Button",
  "change-a-variant": "Change a Variant of the Component",
  "change-css-prop": "Change a Value in the Props",
  "sierpinski-triangle": "Sierpinski Triangle",
  "mount-deep-tree": "Mount Deep Tree",
  "mount-wide-tree": "Mount Wide Tree",
  "benchmarkDesc": "After each test, the page will reload to refresh the cache.",
  "testResults": {
    "start-test": "Start Test",
    "count": "Count",
    "frequency": "Frequency",
    "th1": "First Run",
    "th2": "Last Run",
    "th3": "Average",
    "th4": "Median",
    "th5": "Fastest",
    "th6": "Slowest",
    "th7": "Standard Deviation",
    "th8": "Average",
    "desc1": "The last run should be similar to or faster than the first run.",
    "desc2": "The standard deviation should be only a few milliseconds."
  },
  "retest": "Retest"
}
